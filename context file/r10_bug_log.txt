# FINZO: BUG LOG FROM TDD IMPLEMENTATION

## INTRODUCTION

This document tracks bugs encountered during the Test-Driven Development implementation of the Finzo platform, as outlined in the TDD Plan (r09_TDD_v1.txt). Each entry includes details about the bug, its root cause, resolution approach, and lessons learned to prevent similar issues in the future.

---

## FOUNDATION PHASE BUGS

### BUG-001: JWT Token Validation Failure

**Date:** Week 2, Day 3  
**Service:** Identity & Access Management  
**Test Case:** `WhenUserLogsIn_ThenJWTTokenIsIssued`  
**Severity:** High  

**Description:**  
JWT tokens were being issued correctly but failed validation when used to access protected resources. The tokens were rejected with "invalid signature" errors despite being generated by the service.

**Root Cause:**  
The signing key used for token generation was different from the one used for validation due to environment variable inconsistency between service instances.

**Resolution:**  
- Implemented centralized key management
- Added key rotation mechanism
- Updated tests to verify token validation across service boundaries
- Added monitoring for token validation failures

**Status:** Resolved (Week 2, Day 4)

---

### BUG-002: Multi-tenant Schema Creation Race Condition

**Date:** Week 3, Day 2  
**Service:** User Profile Service  
**Test Case:** `GivenMultipleTenants_WhenAccessingProfile_ThenCorrectTenantDataIsReturned`  
**Severity:** Medium  

**Description:**  
When multiple tenant creation requests occurred simultaneously, occasional database errors occurred due to concurrent schema creation attempts.

**Root Cause:**  
The tenant provisioning process lacked proper synchronization, causing race conditions during schema creation.

**Resolution:**  
- Implemented tenant provisioning queue
- Added database-level locking for schema creation operations
- Enhanced error handling for conflict scenarios
- Updated tests to simulate concurrent tenant creation

**Status:** Resolved (Week 3, Day 5)

---

### BUG-003: API Gateway Caching Stale Authentication Data

**Date:** Week 4, Day 1  
**Service:** API Gateway  
**Test Case:** `WhenRequestingProtectedEndpoint_ThenAuthorizationIsValidated`  
**Severity:** Medium  

**Description:**  
After user permissions were updated, the API Gateway continued to use cached authorization data, causing incorrect access control decisions for up to 5 minutes.

**Root Cause:**  
The API Gateway was caching authorization data without a proper invalidation mechanism when permissions changed.

**Resolution:**  
- Implemented cache invalidation hooks for permission changes
- Added version identifiers to authorization tokens
- Reduced cache TTL for authorization data
- Added tests to verify permission update propagation

**Status:** Resolved (Week 4, Day 3)

---

## CORE FUNCTIONALITY PHASE BUGS

### BUG-004: Transaction Amount Precision Loss

**Date:** Week 5, Day 4  
**Service:** Transaction Management Service  
**Test Case:** `WhenCreatingTransaction_ThenTransactionIsPersisted`  
**Severity:** Critical  

**Description:**  
Transaction amounts with more than 2 decimal places were being rounded incorrectly, causing financial discrepancies in reports and balances.

**Root Cause:**  
The service was using floating-point types (float/double) for monetary values instead of decimal/fixed-point types.

**Resolution:**  
- Changed data model to use BigDecimal/Decimal type for all monetary values
- Updated database schema to use DECIMAL(19,4) for amount fields
- Added validation for currency-specific precision rules
- Enhanced tests to verify precision handling across different currencies
- Implemented data migration for existing transactions

**Status:** Resolved (Week 6, Day 1)

---

### BUG-005: AI Service Categorization Timeout

**Date:** Week 7, Day 2  
**Service:** AI Service  
**Test Case:** `GivenTransactionData_WhenCategorizingTransaction_ThenCategoryIsReturned`  
**Severity:** Medium  

**Description:**  
Transaction categorization requests occasionally timed out when processing batches of transactions, causing categorization failures.

**Root Cause:**  
The rule-based categorization engine had an inefficient pattern matching algorithm with exponential complexity for certain transaction descriptions.

**Resolution:**  
- Refactored pattern matching algorithm to use pre-compiled regex patterns
- Implemented timeouts for individual category matching attempts
- Added circuit breaker for repeated timeout issues
- Split batch processing into smaller chunks
- Enhanced logging to identify problematic patterns

**Status:** Resolved (Week 7, Day 4)

---

### BUG-006: Split Expense With Deleted Participant

**Date:** Week 8, Day 3  
**Service:** Expense Sharing Service  
**Test Case:** `WhenSettlingDebt_ThenSettlementIsRecorded`  
**Severity:** Medium  

**Description:**  
When a user was deleted from the system, split expenses with that user caused errors during settlement calculations and balance updates.

**Root Cause:**  
The service assumed all participants would always exist and didn't handle the case of user deletion properly.

**Resolution:**  
- Implemented soft deletion for user accounts
- Added participant status tracking in split expenses
- Updated settlement logic to handle inactive participants
- Enhanced error messages for split operation failures
- Added test cases for splits with deleted participants

**Status:** Resolved (Week 9, Day 1)

---

## INTEGRATION PHASE BUGS

### BUG-007: Lost Notifications During Service Restart

**Date:** Week 11, Day 2  
**Service:** Notification Service  
**Test Case:** `WhenEventOccurs_ThenNotificationIsQueued`  
**Severity:** High  

**Description:**  
Notifications queued but not yet processed were lost when the Notification Service was restarted, causing users to miss important alerts.

**Root Cause:**  
The service was using an in-memory queue without persistence, causing queued items to be lost on restart.

**Resolution:**  
- Replaced in-memory queue with persistent message broker (RabbitMQ)
- Implemented message acknowledgment pattern
- Added dead-letter queue for failed notifications
- Enhanced monitoring for queue depth and processing rates
- Updated tests to verify notification delivery across service restarts

**Status:** Resolved (Week 11, Day 5)

---

### BUG-008: Document Storage Path Collision

**Date:** Week 12, Day 1  
**Service:** Document Management Service  
**Test Case:** `WhenUploadingDocument_ThenDocumentIsStored`  
**Severity:** Medium  

**Description:**  
When multiple users uploaded documents with the same filename in quick succession, occasional file overwrites occurred despite using tenant-specific storage.

**Root Cause:**  
The file path generation algorithm used predictable naming conventions without sufficient uniqueness guarantees.

**Resolution:**  
- Added UUID-based filenames
- Implemented two-level directory structure based on hash of document ID
- Enhanced collision detection in storage service
- Added versioning for document updates
- Updated tests to simulate concurrent uploads with same filename

**Status:** Resolved (Week 12, Day 3)

---

### BUG-009: Bank Statement Import Duplicates

**Date:** Week 13, Day 2  
**Service:** Banking Integration Service  
**Test Case:** `WhenFetchingTransactions_ThenTransactionsAreImported`  
**Severity:** High  

**Description:**  
When importing bank statements for the same date range multiple times, duplicate transactions were created instead of being identified as existing records.

**Root Cause:**  
The transaction matching algorithm relied solely on transaction dates and amounts, without considering additional identifiers or metadata from the bank.

**Resolution:**  
- Enhanced matching algorithm to use multiple fields for identification
- Added transaction source reference ID for imported transactions
- Implemented two-phase import with verification step
- Added duplicate detection with confidence scoring
- Updated tests to verify duplicate handling during import

**Status:** Resolved (Week 13, Day 5)

---

## BUSINESS FEATURES PHASE BUGS

### BUG-010: Tax Calculation Error for Specific Income Range

**Date:** Week 14, Day 1  
**Service:** Tax Management Service  
**Test Case:** `GivenTransactions_WhenCalculatingTaxLiability_ThenCorrectAmountIsReturned`  
**Severity:** Critical  

**Description:**  
Tax liability calculations for annual income between ₹12,50,000 and ₹15,00,000 were incorrectly applying surcharge rates in the new tax regime.

**Root Cause:**  
The tax calculation logic had an off-by-one error in the income slab comparison, causing the wrong tax rate to be applied for boundary values.

**Resolution:**  
- Fixed income slab boundary conditions
- Added comprehensive test cases for each tax slab boundary
- Implemented parameterized tests with tax calculation examples
- Added validation against known tax calculation examples
- Enhanced logging for intermediate calculation steps

**Status:** Resolved (Week 14, Day 2)

---

### BUG-011: GST Calculation Rounding Discrepancy

**Date:** Week 14, Day 4  
**Service:** Business Operations Service  
**Test Case:** `GivenInvoice_WhenCalculatingTax_ThenCorrectGSTIsApplied`  
**Severity:** Medium  

**Description:**  
GST calculations for invoices with multiple line items showed small discrepancies when compared to expected totals due to rounding differences.

**Root Cause:**  
Each line item's GST was calculated and rounded individually, then summed, rather than calculating GST on the total taxable amount.

**Resolution:**  
- Updated GST calculation to follow official GST rounding rules
- Added item-level and invoice-level tax calculations
- Implemented configurable rounding strategies
- Enhanced tests to verify GST calculations with various item combinations
- Added reconciliation logic to handle rounding differences

**Status:** Resolved (Week 15, Day 1)

---

## CROSS-CUTTING CONCERNS BUGS

### BUG-012: Tenant Context Loss in Asynchronous Operations

**Date:** Week 15, Day 3  
**Service:** Multiple Services  
**Test Case:** Multiple failures across service boundaries  
**Severity:** High  

**Description:**  
Tenant context information was being lost during asynchronous operations across service boundaries, causing data to be processed in the wrong tenant context.

**Root Cause:**  
The tenant context was stored in thread-local storage but not propagated to async execution threads or included in message payloads.

**Resolution:**  
- Implemented tenant context propagation in all async operations
- Added tenant ID to all message payloads for cross-service communication
- Created middleware for automatic tenant context restoration
- Enhanced logging to include tenant identifier in all log messages
- Updated tests to verify tenant context preservation across async boundaries

**Status:** Resolved (Week 15, Day 5)

---

### BUG-013: Database Connection Pool Exhaustion

**Date:** Week 16, Day 1  
**Service:** Multiple Services  
**Test Case:** `GivenLargeDataset_WhenQuerying_ThenPerformanceIsAcceptable`  
**Severity:** Critical  

**Description:**  
Under load testing, multiple services experienced database connection failures due to connection pool exhaustion, causing cascading failures.

**Root Cause:**  
Connection pools were configured with default settings without considering the multi-tenant nature of the application, leading to inefficient connection usage.

**Resolution:**  
- Reconfigured connection pools with appropriate sizing
- Implemented connection timeout and retry mechanism
- Added circuit breaker for database operation failures
- Enhanced monitoring for connection pool utilization
- Updated load tests to verify connection handling under stress

**Status:** Resolved (Week 16, Day 3)

---

### BUG-014: API Versioning Compatibility Break

**Date:** Week 16, Day 4  
**Service:** API Gateway  
**Test Case:** `WhenVersionChanges_ThenBackwardCompatibilityIsPreserved`  
**Severity:** High  

**Description:**  
A change to the Transaction API response format broke backward compatibility for existing clients, despite using API versioning.

**Root Cause:**  
The API versioning was implemented at the route level but not enforced at the response schema level, allowing breaking changes to be introduced.

**Resolution:**  
- Implemented response transformation based on requested API version
- Added API compatibility tests as part of CI pipeline
- Created version-specific response models
- Enhanced API documentation to clarify versioning expectations
- Introduced API deprecation process with grace period

**Status:** Resolved (Week 16, Day 5)

---

## LESSONS LEARNED & PREVENTIVE MEASURES

### Financial Data Handling
1. **Use Appropriate Data Types**: Always use decimal/fixed-point types for financial calculations
2. **Define Rounding Strategies**: Establish clear rules for rounding and calculation order
3. **Test Boundary Cases**: Extensively test boundary values in financial calculations
4. **Reconciliation Checks**: Implement validation that totals match sum of parts

### Multi-tenancy
1. **Tenant Context Propagation**: Ensure tenant context flows through all operations
2. **Isolation Testing**: Regularly test cross-tenant isolation
3. **Resource Allocation**: Configure resource pools with multi-tenancy in mind
4. **Schema Management**: Implement safeguards for schema creation and modification

### Asynchronous Processing
1. **Persistent Queues**: Use durable message storage for critical operations
2. **Idempotent Operations**: Design operations to be safely retryable
3. **Context Propagation**: Ensure all necessary context is included in messages
4. **Failure Handling**: Implement dead-letter queues and retry policies

### Data Integrity
1. **Concurrency Controls**: Implement proper locking or optimistic concurrency
2. **Unique Constraints**: Use natural keys or surrogate keys with uniqueness guarantees
3. **Duplicate Detection**: Implement robust matching algorithms for imports
4. **Soft Deletion**: Prefer marking records as deleted over physical deletion

### API Design
1. **Strict Versioning**: Apply versioning at all API levels, including response schemas
2. **Compatibility Testing**: Test backward compatibility as part of CI
3. **Clear Deprecation**: Provide clear timelines for API deprecation
4. **Comprehensive Documentation**: Document all breaking and non-breaking changes

### Security
1. **Centralized Security Controls**: Manage authentication and authorization centrally
2. **Cache Invalidation**: Ensure security-related caches are properly invalidated
3. **Key Management**: Implement secure key storage and rotation
4. **Regular Security Testing**: Include security scenarios in regular test cycles

---

## BUG METRICS

### Bug Distribution by Service
- Identity & Access Management: 1
- User Profile Service: 1
- API Gateway: 2
- Transaction Management Service: 1
- AI Service: 1
- Expense Sharing Service: 1
- Notification Service: 1
- Document Management Service: 1
- Banking Integration Service: 1
- Tax Management Service: 1
- Business Operations Service: 1
- Cross-Cutting Concerns: 3

### Bug Distribution by Root Cause
- Configuration Issues: 3
- Concurrency Problems: 2
- Data Type/Precision Errors: 2
- Algorithm Deficiencies: 2
- State Management Flaws: 2
- Asynchronous Operation Issues: 2
- Input Validation Gaps: 1

### Bug Distribution by Severity
- Critical: 3
- High: 5
- Medium: 6
- Low: 0

### Average Resolution Time
- Critical Bugs: 1.3 days
- High Severity: 2.4 days
- Medium Severity: 2.5 days
- Overall Average: 2.2 days 